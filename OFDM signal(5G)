#include <iostream>
#include <vector>
#include <complex>
#include <cmath>
using namespace std;
 
// Constants
const int N_subcarriers = 2048;  // Number of subcarriers (N_u)
const int N_cp = 144;  // Cyclic prefix length for normal CP
const double PI = 3.14159265358979323846;
 
// Function to perform Inverse FFT (simplified for educational purposes)
vector<complex<double>> simpleIFFT(const vector<complex<double>>& input) {
    int N = input.size();
    vector<std::complex<double>> output(N);
 
    for (int k = 0; k < N; ++k) {
        for (int n = 0; n < N; ++n) {
            double angle = 2 * PI * k * n / N;
            output[k] += input[n] * std::exp(complex<double>(0, angle));
        }
        output[k] /= N;
    }
 
    return output;
}
 
// Function to generate OFDM symbol
vector<complex<double>> generateOFDMsymbol(const vector<complex<double>>& inputSymbols) {
    return simpleIFFT(inputSymbols);
}
 
// Function to add cyclic prefix
vector<complex<double>> addCyclicPrefix(const vector<complex<double>>& ofdmSymbol) {
    vector<complex<double>> withCP(N_subcarriers + N_cp);
    // Copy cyclic prefix
    for (int i = 0; i < N_cp; ++i) {
        withCP[i] = ofdmSymbol[N_subcarriers - N_cp + i];
    }
 
    // Copy OFDM symbol
    for (int i = 0; i < N_subcarriers; ++i) {
        withCP[N_cp + i] = ofdmSymbol[i];
    }
 
    return withCP;
}
 
int main() {
    // Example QPSK symbols for simplicity
    vector<complex<double>> inputSymbols(N_subcarriers);
    for (int i = 0; i < N_subcarriers; ++i) {
        inputSymbols[i] = complex<double>((i % 2) * 2 - 1, ((i / 2) % 2) * 2 - 1);  // Simple QPSK modulation
    }
 
    // Generate OFDM symbol
    vector<complex<double>> ofdmSymbol = generateOFDMsymbol(inputSymbols);
 
    // Add cyclic prefix
    vector<complex<double>> ofdmSymbolWithCP = addCyclicPrefix(ofdmSymbol);
 
    // Output the OFDM symbol with cyclic prefix
    cout << "OFDM symbol with cyclic prefix:" << endl;
    for (const auto& sample : ofdmSymbolWithCP) {
        cout << sample << endl;
    }
 
    return 0;
}
