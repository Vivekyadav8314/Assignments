Q1.Write a note on C++ Dynamic Memory Allocation. Write a C++ program to illustrate new and delete operators.
Ans:-#include <iostream>

using namespace std;

int main() {
  // Allocate memory for an integer
  int* ptr = new int;

  // Use the allocated memory
  *ptr = 10;
  cout << "Value: " << *ptr << endl;

  // Free up the memory
  delete ptr;

  return 0;
}
Output:-
Value: 10


2. Write a C++ program to illustrate single level, multilevel, multiple, hierarchical and hybrid inheritance.
Ans:-A)Single Level
#include <iostream>

using namespace std;

// Base class: Space
class Space 
{
    public:void orbit() 
    {
        cout << "Orbiting in space..." << endl;
    }
};

// Single Level Inheritance: Planet inherits from Space
class Planet : public Space
{
    public:void rotate() 
    {
        cout << "Rotating on its axis..." << endl;
    }
};
int main() 
{
    Planet earth;
    earth.orbit();
    earth.rotate();
    
    return 0;
}
Output:-
Orbiting in space...
Rotating on its axis...

B)Multilevel:
#include <iostream>
using namespace std;

// Base class: Space
class Space 
{
    public:void orbit() 
    {
        cout << "The area directly outside of Earth's atmosphere." << endl;
    }
};

// Intermediate class: Planet inherits from Space
class Planet : public Space 
{
    public:void rotate() 
    {
        cout << "A planet is a celestial body that is in orbit around the Sun " << endl;
    }
};

// Derived class: Earth inherits from Planet
class Earth : public Planet 
{
    public:void supportLife() 
    {
        cout << "Earth is the third planet from the Sun and the only astronomical object known to harbor life." << endl;
    }
};

int main() 
{
    Earth earth;
    earth.orbit(); // Inherited from SpaceObject
    earth.rotate(); // Inherited from Planet
    earth.supportLife(); // Own method

    return 0;
}
Output:-
The area directly outside of Earth's atmosphere.
A planet is a celestial body that is in orbit around the Sun 
Earth is the third planet from the Sun and the only astronomical object known to harbor life.

C)Multiple:-
#include <iostream>

using namespace std;

// Base class: Space
class Space 
{
    public:void orbit() 
    {
        cout << "The area directly outside of Earth's atmosphere." << endl;
    }
};

// Base class: Astronaut
class Astronaut 
{
    public:void spacewalk() 
    {
        cout << "An astronaut is someone who travels in space. " << endl;
    }
};

// Derived class: SpaceSuit inherits from Space and Astronaut
class SpaceSuit : public Space, public Astronaut 
{
    public:void protect() 
    {
        cout << "Protecting the astronaut." << endl;
    }
};

int main() 
{
    SpaceSuit spaceSuit;
    spaceSuit.orbit(); // Inherited from Space
    spaceSuit.spacewalk(); // Inherited from Astronaut
    spaceSuit.protect(); // Own method

    return 0;
}
Output:-
The area directly outside of Earth's atmosphere.
An astronaut is someone who travels in space. 
Protecting the astronaut.

D)Hierarchical:-
#include <iostream>

using namespace std;

// Base class: Space
class Space 
{
    public:void orbit() 
    {
        cout << "Orbiting in space..." << endl;
    }
};

// Intermediate class: Planet inherits from Space
class Planet : public Space 
{
    public:void rotate() 
    {
        cout << "Rotating on its axis..." << endl;
    }
};

// Derived class: Earth inherits from Planet
class Earth : public Planet 
{
    public:void supportLife() 
    {
        cout << "Supporting life..." << endl;
    }
};
// Derived class: Moon inherits from Planet
class Moon : public Planet {
public:
    void eclipse() {
        cout << "Eclipsing the sun..." << endl;
    }
};

int main() {
    Earth earth;
    earth.orbit(); // Inherited from SpaceObject
    earth.rotate(); // Inherited from Planet
    earth.supportLife(); // Own method

    Moon moon;
    moon.orbit(); // Inherited from SpaceObject
    moon.rotate(); // Inherited from Planet
    moon.eclipse(); // Own method

    return 0;
}
Output:-
Supporting life...
Orbiting in space...
Rotating on its axis...
Eclipsing the sun...

E)Hybrid:-
#include <iostream>

using namespace std;

// Base class: Space
class Space
{
    public:void orbit() 
    {
        cout << "Orbiting in space..." << endl;
    }
};

// Base class: Astronaut
class Astronaut 
{
    public:void spacewalk() 
    {
        cout << "Performing a spacewalk..." << endl;
    }
};

// Intermediate class: SpaceStation inherits from Space
class SpaceStation : public Space
{
    public:void dock() 
    {
        cout << "Docking at the space station..." << endl;
    }
};
// Derived class: SpaceShuttle inherits from SpaceStation and Astronaut
class SpaceShuttle : public SpaceStation, public Astronaut 
{
    public:void launch() 
    {
        cout << "Launching into space..." << endl;
    }
};

int main() 
{
    SpaceShuttle spaceShuttle;
    spaceShuttle.orbit(); // Inherited from SpaceObject
    spaceShuttle.dock(); // Inherited from SpaceStation
    spaceShuttle.spacewalk(); // Inherited from Astronaut
    spaceShuttle.launch(); // Own method

    return 0;
}
Output:-
Orbiting in space...
Docking at the space station...
Performing a spacewalk...
Launching into space...


3. Write a C++ program to illustrate shallow and deep copy.
Ans:-#include <iostream>

using namespace std;

class MyClass {
public:
    int* ptr;
    MyClass() {
        ptr = new int;
    }
    ~MyClass() {
        delete ptr;
    }
};

// Shallow Copy
MyClass shallowCopy(MyClass source) {
    MyClass copy;
    copy.ptr = source.ptr; // Shallow copy, copying pointer only
    return copy;
}

// Deep Copy
MyClass deepCopy(MyClass source) {
    MyClass copy;
    copy.ptr = new int; // Deep copy, allocating new memory
    *copy.ptr = *source.ptr; // Copying the value
    return copy;
    
}

int main() {
    MyClass original;
    *original.ptr = 10;

    // Shallow Copy
    MyClass shallow = shallowCopy(original);
    *shallow.ptr = 20; // Changes the original value

    // Deep Copy
    MyClass deep = deepCopy(original);
    *deep.ptr = 30; // Does not change the original value

    cout << "Original: " << *original.ptr << endl;
    cout << "Shallow: " << *shallow.ptr << endl;
    cout << "Deep: " << *deep.ptr << endl;

    return 0;
}
Output:-
Original: 20
Shallow: 20
Deep: 30